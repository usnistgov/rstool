.\"
.Dd March 30, 2011
.Dt RSTOOL 1
.Os "Mac OS X"
.Sh NAME
.Nm rstool
.Nd manipulate RecordStores
.\"
.Sh SYNOPSIS
.Nm
add
.Fl s
.Ar rs
.Fl a
.Ar file
.Op Fl a Ar ...
.Op Fl h Ar hash_rs Op Fl c | Fl p
.Op Fl k Ar (fp)
.Pp
.Nm
diff
.Fl s
.Ar rs1
.Fl s
.Ar rs2
.Op Fl a Ar file
.Op Fl f
.Op Fl k Ar key Op Fl k Ar ...
.Pp
.Nm
display/dump
.Fl s
.Ar rs
.Op Fl k Ar key | Fl r Ar #-#
.Op Fl h Ar hash_rs
.Op Fl o Ar dir
.Pp
.\"
.Nm
list
.Fl s
.Ar rs
.Pp

\# "rstool make" example
.\"
.Nm
make
.Fl s
.Ar new_rs
.Op Fl a Ar text Op Fl a Ar ...
.Op Fl h Ar hash_rs Op Fl c | Fl p
.Op Fl k Ar (fp)
.Op Fl o Ar dir
.Op Fl t Ar rs_type
.Op file/dir ...
.Pp

.\"
.Nm
merge
.Fl s
.Ar new_rs
.Fl a
.Ar existing_rs
.Op Fl a Ar ...
.Op Fl h Ar hash_rs Op Fl c
.Op Fl o Ar dir
.Op Fl t Ar rs_type
.Pp
.Nm
remove
.Op Fl f
.Fl s
.Ar rs
.Fl k
.Ar key
.Op Fl k Ar ...
.Pp
.Nm
version
.Pp
.\"
.Nm
unhash
.Fl s
.Ar hash_rs
.Fl h
.Ar hash
.\"
.Sh DESCRIPTION
The
.Nm
command is used to manipulate any type of RecordStore supported by the BiometricEvaluation framework.
.Pp
The functions are as follows:
.\"
.Bl -tag -indent -width "display/dump  "
.It Cm add
Add an individual file into an existing RecordStore.
.Bl -tag -compact -width "hash_rs    "
.It Cm -a Fa file
File to add to 
.Fa rs .
Multiple
.Cm -a
arguments may be specified.
.It Cm -c
If 
.Fa hash_rs
is specified, use the content of
.Fa file
instead of the name to form the hash.
.It Cm -h Fa hash_rs
Existing hash translation RecordStore.  Passing this argument indicates that
.Fa file
should be hashed when inserted into
.Fa rs .
.It Cm -k Fa (fp)
If
.Fa hash_rs
is specified, print the file path (
.Cm -kp 
) or the file name (
.Cm -kf 
) as the value of the hash in the hash translation RecordStore (
.Cm -kf
is the default unless
.Cm -p 
is specified ).
.It Cm -p
If 
.Fa hash_rs
is specified, use the path to
.Fa file
instead of the name to form the hash.  This will set 
.Cm -kp
by default if no other
.Cm -k
option is specified.
.It Cm -s Fa rs
The existing RecordStore to which 
.Fa file
should be added.
.El

.It Cm diff
See if differences exist between keys of RecordStores.
.\"
.Bl -tag -compact -width "file    "
.It Cm -a Fa file
Compare all keys found in
.Fa file 
(one per line, with #comments and blank lines ignored).
.It Cm -f
Perform the comparison using a byte-for-byte comparison rather than comparing
checksums.
.It Cm -k Fa key
The
.Fa key
to compare.  Note that if no
.Cm -k
or
.Cm -a
option is given, all keys from
.Fa rs1
will be compared.
.It Cm -s Fa rs1
A RecordStore containing keys to compare.
.It Cm -s Fa rs2
The RecordStore whose contents will be compared to the contents of
.Fa rs1 .
.El

.It Cm display/dump
Extract records from 
.Fa rs .
.\"
.Bl -tag -compact -width "hash_rs    "
.It Cm -o Fa dir
Place extracted records in
.Fa dir .
.It Cm -h Fa hash_rs
When extracting, lookup the keys of
.Fa rs
and output their unhashed version, using
.Fa hash_rs
as a hash translation RecordStore.
.It Cm -k Fa key
The
.Fa key
to extract.
.It Cm -r Fa #-#
Inclusive range of keys to extract.
.It Cm -s Fa rs
The RecordStore from which to dump
.Fa key
or
.Fa #-# .
.El
.It Cm list
List all keys contained in
.Fa rs .
.Bl -tag -compact -width "-s rs "
.It Cm -s Fa rs
The RecordStore to list.
.El

\# "rstool make" usage
.It Cm make
Create a new RecordStore named
.Fa new_rs .
.Bl -tag -compact -width "file/dir ...   "
.It Cm -a Fa text
Add the files/dirs whose paths are listed in
.Fa text .
Multiple 
.Cm -a
arguments may be specified.
.It Cm -c
If 
.Fa hash_rs
is specified, use the content of files added
instead of the name to form the hash.
.It Cm -h Fa hash_rs
Hash keys that will be added to 
.Fa new_rs
and create a hash translation RecordStore (of type
.Fa type )
at 
.Fa hash_rs 
that can be used with
.Cm unhash .
.It Cm -k Fa (fp)
If
.Fa hash_rs
is specified, print the file path (
.Cm -kp 
) or the file name (
.Cm -kf 
) as the value of the hash in the hash translation RecordStore (
.Cm -kf
is the default unless
.Cm -p 
is specified ).
.It Cm -o Fa dir
Place 
.Fa new_rs
(and 
.Fa hash_rs )
in
.Fa dir .
.It Cm -p
If 
.Fa hash_rs
is specified, use the path to
.Fa dir/text/file
instead of the name to form the hash.  This will set 
.Cm -kp
by default if no other
.Cm -k
option is specified.
.It Cm -s Fa new_rs
The RecordStore that will be created.
.It Cm -t Fa type
Create a
.Fa type
RecordStore, where type is:
.Bl -tag -compact
.It Fa Archive
.It Fa BerkeleyDB
(default)
.It Fa File
.El
.It Fa file/dir ...
Files/dirs to initially add to
.Fa new_rs .
 
.El
.It Cm merge
Merge one or more existing RecordStores into 
.Fa new_rs .
.Bl -tag -width "-a existing_rs " -compact
.It Cm -a Fa existing_rs
Add all records within
.Fa existing_rs
to 
.Fa new_rs .
Multiple 
.Cm -a
arguments may be specified.
.It Cm -c
If 
.Fa hash_rs
is specified, use the content of the values in the existing RecordStores
instead of the name to form the hash.
.It Cm -h Fa hash_rs
Hash the keys in
.Fa existing_rs
and create a hash translation RecordStore
(of type
.Fa type )
at 
.Fa hash_rs
that can be used with
.Cm unhash
before merging into
.Fa new_rs .
.It Cm -o Fa dir
Place 
.Fa new_rs
(and 
.Fa hash_rs )
in
.Fa dir .
.It Cm -s Fa new_rs
The merge of all
.Cm -a
options.
.It Cm -t Fa type
Create a
.Fa type
RecordStore, where type is:
.Bl -tag -compact
.It Fa Archive
.It Fa BerkeleyDB
(default)
.It Fa File
.El
.El
.It Cm remove
Remove
.Fa key
from
.Fa rs .
.Bl -tag -compact -width "-k key "
.It Cm -f
Force removal, do not prompt.
.It Cm -k Fa key
The key to remove.  Multiple
.Cm -k
may be specified.
.It Cm -s Fa rs
The RecordStore from which to remove.
.El
.It Cm version
Display the version of
.Nm
and exit.
.It Cm unhash
Extract the original form of 
.Fa hash .
.Bl -tag -compact -width "-s hash_rs "
.It Cm -h Fa hash
The hash to unhash.
.It Cm -s Fa hash_rs
The hash translation RecordStore.
.El
.Sh EXAMPLES
.Bl -tag -width -indend
.It Li rstool merge -s 3B -a templates/3B-00001 -a templates/3B-00002
.Pp
Merge the RecordStores
.Em 3B-00001
and
.Em 3B-00002
into the new RecordStore
.Em 3B ,
that will be placed in the current working directory.
.Pp
.\"
.It Li rstool dump -s 3B -o exports
.Pp
Create a separate file for each record in 
.Em 3B
in the newly created directory
.Em exports .
.Pp
.\"
.It Li rstool list -s 3B > 3B_listing.txt
.Pp
Create a textfile named
.Em 3B_listing.txt
that contains the keys of all the records in
.Em 3B .
.Pp
.\"
.It Li rstool -s hash_translation_rs -h 26ab33fb2612fc4755479bf95736d53f
.Pp
Find the unhashed version of 
.Em 26ab33fb2612fc4755479bf95736d53f
using the 
.Em hash_translation_rs .
.Pp
.\"
.It Li rstool merge -s azla_new -a azla_db -t archive
.Pp
Convert
.Em azla_db
(a BerkeleyDB RecordStore) into an Archive RecordStore named
.Em azla_new .
.Pp
.\"
.It Li rstool make -s azla -a ~/images/azla/00001/ -a ~/images/azla/00002/
.Pp
Add the contents of the directories
.Em 00001
and
.Em 00002
into a newly formed RecordStore named
.Em azla .
.Pp
.El
.\"
.\"
.Sh VERSION
This man page is current for version 1.1 of
.Nm .
.Sh HISTORY
First released March 07, 2011 by NIST.
